# Autogenerated by dataset/generate_data.py
.PHONY: clean dataset loadedgedb loadsqlalchemy loaddjango initscripts help
.PHONY: loadall
.DEFAULT_GOAL := help

# Autogenerated parameters
MDB={mdb}
JSON={json}
TAIL={tail}
BUILD=dataset/build
BENCH=benchmarks

# Parameters that can be passed to 'dataset'
people?={people}
users?={users}
reviews?={reviews}


clean:
	rm $(MDB)
	rm $(JSON)

dataset:
	python dataset/generate_data.py $(people) $(users) $(reviews)

# if the data is already loaded, don't do this step
loadedgedb:
	# reset the edgedb_bench database & import the schema
	python flask_edgedb/initdb.py
	# load the data from the dataset pickle
	python dataset/edb_loaddata.py $(MDB)
	# generate EdgeDB based ID files
	python dataset/generate_id_files.py $(MDB)

# if the data is already loaded, don't do this step
loadsqlalchemy:
	# create the DB & user, silently
	-psql -U postgres -tc \
		"CREATE ROLE flask_bench WITH \
			LOGIN ENCRYPTED PASSWORD 'edgedbbenchmark';" &> /dev/null
	-psql -U postgres -tc \
		"CREATE DATABASE flask_bench WITH OWNER = flask_bench;" \
		&> /dev/null
	# reset the flask_bench database & import the schema
	cd flask_sqlalchemy && python manage.py db upgrade
	# load the data from the dataset pickle
	cd flask_sqlalchemy && python loaddata.py $(JSON)

# if the data is already loaded, don't do this step
loaddjango:
	# create the DB & user, silently
	-psql -U postgres -tc \
		"CREATE ROLE django_bench WITH \
			LOGIN ENCRYPTED PASSWORD 'edgedbbenchmark';" &> /dev/null
	-psql -U postgres -tc \
		"DROP DATABASE django_bench;" &> /dev/null
	-psql -U postgres -tc \
		"CREATE DATABASE django_bench WITH OWNER = django_bench;" \
		&> /dev/null
	# reset the django_bench database & import the schema
	cd django_rest && python manage.py flush --noinput
	# apply migrations, including the data migration
	@mkdir django_rest/webapp/fixtures -p
	cp $(JSON) django_rest/webapp/fixtures/data.json
	cd django_rest && python manage.py migrate

# load all the data in all the DBs and initialize the benchmark scripts
loadall: loadedgedb loadsqlalchemy loaddjango initscripts

initscripts:
	cp "$(BUILD)/user_ids_$(TAIL).txt" "$(BENCH)/user_ids.txt"
	cp "$(BUILD)/person_ids_$(TAIL).txt" "$(BENCH)/person_ids.txt"
	cp "$(BUILD)/movie_ids_$(TAIL).txt" "$(BENCH)/movie_ids.txt"
	cp "$(BUILD)/edgedb_user_ids_$(TAIL).txt" "$(BENCH)/edgedb_user_ids.txt"
	cp "$(BUILD)/edgedb_person_ids_$(TAIL).txt" "$(BENCH)/edgedb_person_ids.txt"
	cp "$(BUILD)/edgedb_movie_ids_$(TAIL).txt" "$(BENCH)/edgedb_movie_ids.txt"
	python benchmarks/generate_gql_request.py "$(BENCH)/user.gql"
	python benchmarks/generate_gql_request.py "$(BENCH)/person.gql"
	python benchmarks/generate_gql_request.py "$(BENCH)/movie.gql"

help:
	@cat README.md
